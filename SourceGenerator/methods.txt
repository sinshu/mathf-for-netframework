#region アセンブリ mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\mscorlib.dll
#endregion

using System.Runtime;
using System.Runtime.ConstrainedExecution;
using System.Security;

namespace System
{
    //
    // 概要:
    //     三角関数や対数関数などの一般的な数値関数の定数と静的メソッドを提供します。
    public static class Math
    {
        //
        // 概要:
        //     定数 (π) を指定して、円の直径に対する円周の割合を表します。
        public const double PI = 3.1415926535897931;
        //
        // 概要:
        //     定数 e によって示される、自然対数の底を表します。
        public const double E = 2.7182818284590451;

        //
        // 概要:
        //     System.Decimal 数値の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.Decimal.MinValue 以上で、System.Decimal.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.Decimal.MaxValue の 10 進数 x。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static decimal Abs(decimal value);
        //
        // 概要:
        //     倍精度浮動小数点数の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.Double.MinValue 以上で、System.Double.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.Double.MaxValue の倍精度浮動小数点数 x。
        [SecuritySafeCritical]
        public static double Abs(double value);
        //
        // 概要:
        //     単精度浮動小数点数の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.Single.MinValue 以上で、System.Single.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.Single.MaxValue の単精度浮動小数点数 x。
        [SecuritySafeCritical]
        public static float Abs(float value);
        //
        // 概要:
        //     32 ビット符号付き整数の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.Int32.MinValue より大きく、System.Int32.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.Int32.MaxValue である 32 ビット符号付き整数 x。
        //
        // 例外:
        //   T:System.OverflowException:
        //     value と System.Int32.MinValue は等しい。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Abs(int value);
        //
        // 概要:
        //     16 ビット符号付き整数の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.Int16.MinValue より大きく、System.Int16.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.Int16.MaxValue である 16 ビット符号付き整数 x。
        //
        // 例外:
        //   T:System.OverflowException:
        //     value と System.Int16.MinValue は等しい。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static short Abs(short value);
        //
        // 概要:
        //     8 ビット符号付き整数の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.SByte.MinValue より大きく、System.SByte.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.SByte.MaxValue である 8 ビット符号付き整数 x。
        //
        // 例外:
        //   T:System.OverflowException:
        //     value と System.SByte.MinValue は等しい。
        [CLSCompliant(false)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static sbyte Abs(sbyte value);
        //
        // 概要:
        //     64 ビット符号付き整数の絶対値を返します。
        //
        // パラメーター:
        //   value:
        //     System.Int64.MinValue より大きく、System.Int64.MaxValue 以下の数値。
        //
        // 戻り値:
        //     0 ≤ x ≤System.Int64.MaxValue である 64 ビット符号付き整数 x。
        //
        // 例外:
        //   T:System.OverflowException:
        //     value と System.Int64.MinValue は等しい。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static long Abs(long value);
        //
        // 概要:
        //     コサインが指定数となる角度を返します。
        //
        // パラメーター:
        //   d:
        //     コサインを表す数で、d が -1 以上 1 以下である必要があります。
        //
        // 戻り値:
        //     0 ≤θ≤π の、ラジアンで表した角度 θ。 または d < -1 または d > 1、あるいは d が System.Double.NaN と等しい場合は、System.Double.NaN。
        [SecuritySafeCritical]
        public static double Acos(double d);
        //
        // 概要:
        //     サインが指定数となる角度を返します。
        //
        // パラメーター:
        //   d:
        //     サインを表す数で、d が -1 以上 1 以下である必要があります。
        //
        // 戻り値:
        //     -π/2 ≤θ≤π/2 の、ラジアンで表した角度 θ。 または d < -1 または d > 1、あるいは d が System.Double.NaN と等しい場合は、System.Double.NaN。
        [SecuritySafeCritical]
        public static double Asin(double d);
        //
        // 概要:
        //     タンジェントが指定数となる角度を返します。
        //
        // パラメーター:
        //   d:
        //     タンジェントを表す数。
        //
        // 戻り値:
        //     -π/2 ≤θ≤π/2 の、ラジアンで表した角度 θ。 または d が System.Double.NaN に等しい場合は System.Double.NaN。d
        //     が System.Double.NegativeInfinity に等しい場合は、倍精度に丸めた -π/2 (-1.5707963267949)。d が
        //     System.Double.PositiveInfinity に等しい場合は、倍精度に丸めた π/2 (1.5707963267949)。
        [SecuritySafeCritical]
        public static double Atan(double d);
        //
        // 概要:
        //     タンジェントが 2 つの指定された数の商である角度を返します。
        //
        // パラメーター:
        //   y:
        //     点の y 座標。
        //
        //   x:
        //     点の x 座標。
        //
        // 戻り値:
        //     -π≤θ≤π および tan(θ) = y / x の、ラジアンで示した角度 θ。(x, y) は、デカルト座標の点を示します。 次の点に注意してください。
        //     クワドラント 1 の (x, y) の場合は、0 < θ < π/2。 クワドラント 2 の (x, y) の場合は、π/2 < θ≤π。 クワドラント
        //     3 の (x, y) の場合は、-π < θ < -π/2。 クワドラント 4 の (x, y) の場合は、-π/2 < θ < 0。 クワドラント間の境界上にある点の場合は、次の戻り値になります。
        //     y が 0 で x が負数でない場合は、θ = 0。 y が 0 で x が負の場合は、θ = π。 y が正で x が 0 の場合は、θ = π/2。
        //     y が負数で x が 0 の場合は、θ = -π/2。 y が 0 かつ x が 0 の場合は、θ = 0。 x または y が System.Double.NaN
        //     であるか、x または y が System.Double.PositiveInfinity または System.Double.NegativeInfinity
        //     のいずれである場合、メソッドは System.Double.NaN を返します。
        [SecuritySafeCritical]
        public static double Atan2(double y, double x);
        //
        // 概要:
        //     2 つの 32 ビット数値の完全な積を生成します。
        //
        // パラメーター:
        //   a:
        //     乗算対象の最初の数。
        //
        //   b:
        //     乗算対象の 2 番目の数。
        //
        // 戻り値:
        //     指定した数値の積を含む数。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static long BigMul(int a, int b);
        //
        // 概要:
        //     指定した 10 進数以上の数のうち、最小の整数値を返します。
        //
        // パラメーター:
        //   d:
        //     10 進数。
        //
        // 戻り値:
        //     d 以上の最小の整数値。 このメソッドは、整数型ではなく System.Decimal を返します。
        public static decimal Ceiling(decimal d);
        //
        // 概要:
        //     指定した倍精度浮動小数点数以上の数のうち、最小の整数値を返します。
        //
        // パラメーター:
        //   a:
        //     倍精度浮動小数点数。
        //
        // 戻り値:
        //     a 以上の最小の整数値。 a が System.Double.NaN、System.Double.NegativeInfinity、System.Double.PositiveInfinity
        //     のいずれかに等しい場合は、その値が返されます。 このメソッドは、整数型ではなく System.Double を返します。
        [SecuritySafeCritical]
        public static double Ceiling(double a);
        //
        // 概要:
        //     指定された角度のコサインを返します。
        //
        // パラメーター:
        //   d:
        //     ラジアンで表した角度。
        //
        // 戻り値:
        //     d のコサイン。 d が System.Double.NaN、System.Double.NegativeInfinity、System.Double.PositiveInfinity
        //     のいずれかに等しい場合、このメソッドは System.Double.NaN を返します。
        [SecuritySafeCritical]
        public static double Cos(double d);
        //
        // 概要:
        //     指定された角度のハイパーボリック コサインを返します。
        //
        // パラメーター:
        //   value:
        //     ラジアンで表した角度。
        //
        // 戻り値:
        //     value のハイパーボリック コサイン。 value が System.Double.NegativeInfinity または System.Double.PositiveInfinity
        //     に等しい場合は、System.Double.PositiveInfinity が返されます。 value が System.Double.NaN に等しい場合は、System.Double.NaN
        //     が返されます。
        [SecuritySafeCritical]
        public static double Cosh(double value);
        //
        // 概要:
        //     2 つの 32 ビット符号付き整数の商を計算し、出力パラメーターの剰余を返します。
        //
        // パラメーター:
        //   a:
        //     被除数。
        //
        //   b:
        //     除数。
        //
        //   result:
        //     剰余。
        //
        // 戻り値:
        //     指定した数値の商。
        //
        // 例外:
        //   T:System.DivideByZeroException:
        //     b が 0 です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int DivRem(int a, int b, out int result);
        //
        // 概要:
        //     2 つの 64 ビット符号付き整数の商を計算し、出力パラメーターの剰余を返します。
        //
        // パラメーター:
        //   a:
        //     被除数。
        //
        //   b:
        //     除数。
        //
        //   result:
        //     剰余。
        //
        // 戻り値:
        //     指定した数値の商。
        //
        // 例外:
        //   T:System.DivideByZeroException:
        //     b が 0 です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static long DivRem(long a, long b, out long result);
        //
        // 概要:
        //     指定した値で e を累乗した値を返します。
        //
        // パラメーター:
        //   d:
        //     累乗を指定する数値。
        //
        // 戻り値:
        //     数値 e を d で累乗した値。 d が System.Double.NaN または System.Double.PositiveInfinity のいずれかに等しい場合は、その値が返されます。
        //     d が System.Double.NegativeInfinity に等しい場合は、0 が返されます。
        [SecuritySafeCritical]
        public static double Exp(double d);
        //
        // 概要:
        //     指定した 10 進数以下の数のうち、最大の整数値を返します。
        //
        // パラメーター:
        //   d:
        //     10 進数。
        //
        // 戻り値:
        //     d 以下の最大の整数値。 このメソッドは、System.Decimal 型の整数値を返すことに注意してください。
        public static decimal Floor(decimal d);
        //
        // 概要:
        //     指定した倍精度浮動小数点数以下の数のうち、最大の整数値を返します。
        //
        // パラメーター:
        //   d:
        //     倍精度浮動小数点数。
        //
        // 戻り値:
        //     d 以下の最大の整数値。 d が System.Double.NaN、System.Double.NegativeInfinity、System.Double.PositiveInfinity
        //     のいずれかに等しい場合は、その値が返されます。
        [SecuritySafeCritical]
        public static double Floor(double d);
        //
        // 概要:
        //     指定した数を別の指定数で除算した結果の剰余を返します。
        //
        // パラメーター:
        //   x:
        //     被除数。
        //
        //   y:
        //     除数。
        //
        // 戻り値:
        //     x - (y Q) に等しい数値。Q は x / y の商を丸めた近似整数を示します。x / y が 2 つの整数の中間に位置する場合は、偶数の整数が返されます。
        //     x - (y Q) がゼロのとき、x が正である場合は値 +0、x が負である場合は -0 が返されます。 y = 0 の場合は、System.Double.NaN
        //     が返されます。
        [SecuritySafeCritical]
        public static double IEEERemainder(double x, double y);
        //
        // 概要:
        //     指定した数値の指定した底での対数を返します。
        //
        // パラメーター:
        //   a:
        //     対数を求める対象の数値。
        //
        //   newBase:
        //     対数の底。
        //
        // 戻り値:
        //     次の表に示した値のいずれか (+Infinity は System.Double.PositiveInfinity、-Infinity は System.Double.NegativeInfinity、NaN
        //     は System.Double.NaN をそれぞれ示しています。) anewBase 戻り値 a> 0 (0 <newBase< 1) - または -(newBase>
        //     1) lognewBase(a) a< 0 (任意の値) NaN (任意の値) newBase< 0 NaN a != 1 newBase = 0 NaN
        //     a != 1 newBase = +Infinity NaN a = NaN (任意の値) NaN (任意の値) newBase = NaN NaN (任意の値)
        //     newBase = 1 NaN a = 0 0 <newBase< 1 +Infinity a = 0 newBase> 1 -Infinity a =
        //     +無限大 0 <newBase< 1 -Infinity a = +無限大 newBase> 1 +Infinity a = 1 newBase = 0
        //     0 a = 1 newBase = +Infinity 0
        public static double Log(double a, double newBase);
        //
        // 概要:
        //     指定した数の自然 (底 e) 対数を返します。
        //
        // パラメーター:
        //   d:
        //     対数を求める対象の数値。
        //
        // 戻り値:
        //     次の表に示した値のいずれか d パラメーター 戻り値 正 d の自然対数。つまり、ln d または log e d 0 System.Double.NegativeInfinity
        //     負 System.Double.NaNSystem.Double.NaN と等価です。System.Double.NaNSystem.Double.PositiveInfinity
        //     と等価です。System.Double.PositiveInfinity
        [SecuritySafeCritical]
        public static double Log(double d);
        //
        // 概要:
        //     指定した数の底 10 の対数を返します。
        //
        // パラメーター:
        //   d:
        //     対数を検索する対象の数値。
        //
        // 戻り値:
        //     次の表に示した値のいずれか d パラメーター 戻り値 正 d の底 10 の log。つまり、log 10d。 0 System.Double.NegativeInfinity
        //     負 System.Double.NaNSystem.Double.NaN と等価です。System.Double.NaNSystem.Double.PositiveInfinity
        //     と等価です。System.Double.PositiveInfinity
        [SecuritySafeCritical]
        public static double Log10(double d);
        //
        // 概要:
        //     2 つの 16 ビット符号付き整数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 16 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 16 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static short Max(short val1, short val2);
        //
        // 概要:
        //     2 つの 16 ビット符号なし整数のうち、大きな方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 16 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 16 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static ushort Max(ushort val1, ushort val2);
        //
        // 概要:
        //     2 つの 32 ビット符号付き整数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 32 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 32 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Max(int val1, int val2);
        //
        // 概要:
        //     2 つの 64 ビット符号付き整数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 64 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 64 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static long Max(long val1, long val2);
        //
        // 概要:
        //     2 つの 64 ビット符号なし整数のうち、大きな方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 64 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 64 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static ulong Max(ulong val1, ulong val2);
        //
        // 概要:
        //     2 つの単精度浮動小数点数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの単精度浮動小数点数の最初の数。
        //
        //   val2:
        //     比較する 2 つの単精度浮動小数点数の 2 番目の数。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。 val1、または val2、または val1 と val2 の両方が System.Single.NaN
        //     に等しい場合、System.Single.NaN が返されます。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static float Max(float val1, float val2);
        //
        // 概要:
        //     2 つの倍精度浮動小数点数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの倍精度浮動小数点数の最初の数。
        //
        //   val2:
        //     比較する 2 つの倍精度浮動小数点数の 2 番目の数。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。 val1、val2、または val1 と val2 の両方が System.Double.NaN
        //     に等しい場合、System.Double.NaN が返されます。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static double Max(double val1, double val2);
        //
        // 概要:
        //     2 つの 10 進数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 10 進数の最初の数。
        //
        //   val2:
        //     比較する 2 つの 10 進数の 2 番目の数。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static decimal Max(decimal val1, decimal val2);
        //
        // 概要:
        //     2 つの 32 ビット符号なし整数のうち、大きな方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 32 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 32 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static uint Max(uint val1, uint val2);
        //
        // 概要:
        //     2 つの 8 ビット符号付き整数のうち、大きい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 8 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 8 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static sbyte Max(sbyte val1, sbyte val2);
        //
        // 概要:
        //     2 つの 8 ビット符号なし整数のうち、大きな方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 8 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 8 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか大きい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static byte Max(byte val1, byte val2);
        //
        // 概要:
        //     2 つの 32 ビット符号付き整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 32 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 32 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Min(int val1, int val2);
        //
        // 概要:
        //     2 つの 10 進数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 10 進数の最初の数。
        //
        //   val2:
        //     比較する 2 つの 10 進数の 2 番目の数。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static decimal Min(decimal val1, decimal val2);
        //
        // 概要:
        //     2 つの倍精度浮動小数点数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの倍精度浮動小数点数の最初の数。
        //
        //   val2:
        //     比較する 2 つの倍精度浮動小数点数の 2 番目の数。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。 val1、val2、または val1 と val2 の両方が System.Double.NaN
        //     に等しい場合、System.Double.NaN が返されます。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static double Min(double val1, double val2);
        //
        // 概要:
        //     2 つの単精度浮動小数点数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの単精度浮動小数点数の最初の数。
        //
        //   val2:
        //     比較する 2 つの単精度浮動小数点数の 2 番目の数。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。 val1、val2、または val1 と val2 の両方が System.Single.NaN
        //     に等しい場合、System.Single.NaN が返されます。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static float Min(float val1, float val2);
        //
        // 概要:
        //     2 つの 64 ビット符号なし整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 64 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 64 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static ulong Min(ulong val1, ulong val2);
        //
        // 概要:
        //     2 つの 64 ビット符号付き整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 64 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 64 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static long Min(long val1, long val2);
        //
        // 概要:
        //     2 つの 32 ビット符号なし整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 32 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 32 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static uint Min(uint val1, uint val2);
        //
        // 概要:
        //     2 つの 16 ビット符号なし整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 16 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 16 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static ushort Min(ushort val1, ushort val2);
        //
        // 概要:
        //     2 つの 16 ビット符号付き整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 16 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 16 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static short Min(short val1, short val2);
        //
        // 概要:
        //     2 つの 8 ビット符号付き整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 8 ビット符号付き整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 8 ビット符号付き整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [CLSCompliant(false)]
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static sbyte Min(sbyte val1, sbyte val2);
        //
        // 概要:
        //     2 つの 8 ビット符号なし整数のうち、小さい方を返します。
        //
        // パラメーター:
        //   val1:
        //     比較する 2 つの 8 ビット符号なし整数の最初の数値。
        //
        //   val2:
        //     比較する 2 つの 8 ビット符号なし整数の 2 番目の数値。
        //
        // 戻り値:
        //     パラメーター val1 または val2 のいずれか小さい方。
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static byte Min(byte val1, byte val2);
        //
        // 概要:
        //     指定の数値を指定した値で累乗した値を返します。
        //
        // パラメーター:
        //   x:
        //     累乗対象の倍精度浮動小数点数。
        //
        //   y:
        //     累乗を指定する倍精度浮動小数点数。
        //
        // 戻り値:
        //     数値 x を y で累乗した値。
        [SecuritySafeCritical]
        public static double Pow(double x, double y);
        //
        // 概要:
        //     10 進数の値は指定した小数部の桁数に丸められ、中間値は最も近い偶数値に丸められます。
        //
        // パラメーター:
        //   d:
        //     丸め対象の 10 進数。
        //
        //   decimals:
        //     戻り値の小数部の桁数。
        //
        // 戻り値:
        //     d に等しい小数部の桁数を格納する decimals に最も近い数値。
        //
        // 例外:
        //   T:System.ArgumentOutOfRangeException:
        //     decimals が 0 未満か、28 を超えています。
        //
        //   T:System.OverflowException:
        //     結果が System.Decimal の範囲外です。
        public static decimal Round(decimal d, int decimals);
        //
        // 概要:
        //     10 進数の値は最も近い整数に丸められ、中間値には指定した丸め処理が使用されます。
        //
        // パラメーター:
        //   d:
        //     丸め対象の 10 進数。
        //
        //   mode:
        //     d が 2 つの数値の中間にある場合に丸める方法を指定します。
        //
        // 戻り値:
        //     d に最も近い整数。 d が 2 つの数値 (一方が偶数でもう一方が奇数) の中間にある場合、mode によって 2 つの数値のどちらが返されるかが決まります。
        //     このメソッドは、整数型ではなく System.Decimal を返します。
        //
        // 例外:
        //   T:System.ArgumentException:
        //     mode が System.MidpointRounding の有効な値ではありません。
        //
        //   T:System.OverflowException:
        //     結果が System.Decimal の範囲外です。
        [SecuritySafeCritical]
        public static decimal Round(decimal d, MidpointRounding mode);
        //
        // 概要:
        //     10 進数の値は最も近い整数値に丸められ、中間値は最も近い偶数値に丸められます。
        //
        // パラメーター:
        //   d:
        //     丸め対象の 10 進数。
        //
        // 戻り値:
        //     d パラメーターに最も近い整数。 d の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。 このメソッドは、整数型ではなく
        //     System.Decimal を返します。
        //
        // 例外:
        //   T:System.OverflowException:
        //     結果が System.Decimal の範囲外です。
        public static decimal Round(decimal d);
        //
        // 概要:
        //     倍精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値には指定した丸め処理が使用されます。
        //
        // パラメーター:
        //   value:
        //     丸め対象の倍精度浮動小数点数。
        //
        //   digits:
        //     戻り値の小数部の桁数。
        //
        //   mode:
        //     value が 2 つの数値の中間にある場合に丸める方法を指定します。
        //
        // 戻り値:
        //     digits に等しい小数部の桁数を格納する value に最も近い数値。 value の小数部の桁数が digits よりも少ない場合、value がそのまま返されます。
        //
        // 例外:
        //   T:System.ArgumentOutOfRangeException:
        //     digits が 0 より小さいか、15 を超えています。
        //
        //   T:System.ArgumentException:
        //     mode が System.MidpointRounding の有効な値ではありません。
        public static double Round(double value, int digits, MidpointRounding mode);
        //
        // 概要:
        //     倍精度浮動小数点の値は最も近い整数に丸められ、中間値には指定した丸め処理が使用されます。
        //
        // パラメーター:
        //   value:
        //     丸め対象の倍精度浮動小数点数。
        //
        //   mode:
        //     value が 2 つの数値の中間にある場合に丸める方法を指定します。
        //
        // 戻り値:
        //     value に最も近い整数。 value が 2 つの整数 (一方が偶数でもう一方が奇数) の中間にある場合、mode によって 2 つの数値のどちらが返されるかが決まります。
        //     このメソッドは、整数型ではなく System.Double を返します。
        //
        // 例外:
        //   T:System.ArgumentException:
        //     mode が System.MidpointRounding の有効な値ではありません。
        public static double Round(double value, MidpointRounding mode);
        //
        // 概要:
        //     倍精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値は最も近い偶数値に丸められます。
        //
        // パラメーター:
        //   value:
        //     丸め対象の倍精度浮動小数点数。
        //
        //   digits:
        //     戻り値の小数部の桁数。
        //
        // 戻り値:
        //     value に等しい小数部の桁数を格納する digits に最も近い数値。
        //
        // 例外:
        //   T:System.ArgumentOutOfRangeException:
        //     digits が 0 より小さいか、15 を超えています。
        public static double Round(double value, int digits);
        //
        // 概要:
        //     倍精度浮動小数点の値は最も近い整数値に丸められ、中間値は最も近い偶数値に丸められます。
        //
        // パラメーター:
        //   a:
        //     丸め対象の倍精度浮動小数点数。
        //
        // 戻り値:
        //     a に最も近い整数。 a の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。 このメソッドは、整数型ではなく
        //     System.Double を返します。
        [SecuritySafeCritical]
        public static double Round(double a);
        //
        // 概要:
        //     10 進数の値は指定した小数部の桁数に丸められ、中間値には指定した丸め処理が使用されます。
        //
        // パラメーター:
        //   d:
        //     丸め対象の 10 進数。
        //
        //   decimals:
        //     戻り値の小数部の桁数。
        //
        //   mode:
        //     d が 2 つの数値の中間にある場合に丸める方法を指定します。
        //
        // 戻り値:
        //     d に等しい小数部の桁数を格納する decimals に最も近い数値。 d の小数部の桁数が decimals よりも少ない場合、d がそのまま返されます。
        //
        // 例外:
        //   T:System.ArgumentOutOfRangeException:
        //     decimals が 0 未満か、28 を超えています。
        //
        //   T:System.ArgumentException:
        //     mode が System.MidpointRounding の有効な値ではありません。
        //
        //   T:System.OverflowException:
        //     結果が System.Decimal の範囲外です。
        [SecuritySafeCritical]
        public static decimal Round(decimal d, int decimals, MidpointRounding mode);
        //
        // 概要:
        //     8 ビット符号付き整数の符号を示す整数を返します。
        //
        // パラメーター:
        //   value:
        //     符号付き数値。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        [CLSCompliant(false)]
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(sbyte value);
        //
        // 概要:
        //     10 進数の符号を示す整数を返します。
        //
        // パラメーター:
        //   value:
        //     符号付きの 10 進数。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(decimal value);
        //
        // 概要:
        //     倍精度浮動小数点数の符号を示す整数を返します。
        //
        // パラメーター:
        //   value:
        //     符号付き数値。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        //
        // 例外:
        //   T:System.ArithmeticException:
        //     value と System.Double.NaN が等価です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(double value);
        //
        // 概要:
        //     単精度浮動小数点数の符号を示す値を返します。
        //
        // パラメーター:
        //   value:
        //     符号付き数値。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        //
        // 例外:
        //   T:System.ArithmeticException:
        //     value と System.Single.NaN が等価です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(float value);
        //
        // 概要:
        //     64 ビット符号付き整数の符号を示す正数を返します。
        //
        // パラメーター:
        //   value:
        //     符号付き数値。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(long value);
        //
        // 概要:
        //     16 ビット符号付き整数の符号を示す整数を返します。
        //
        // パラメーター:
        //   value:
        //     符号付き数値。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(short value);
        //
        // 概要:
        //     32 ビット符号付き整数の符号を示す整数を返します。
        //
        // パラメーター:
        //   value:
        //     符号付き数値。
        //
        // 戻り値:
        //     value の符号を示す数値 (次の表を参照)。 戻り値 説明 -1 value が 0 未満です。 0 value が 0 です。 1 value が
        //     0 より大きい値です。
        [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        public static int Sign(int value);
        //
        // 概要:
        //     指定された角度のサインを返します。
        //
        // パラメーター:
        //   a:
        //     ラジアンで表した角度。
        //
        // 戻り値:
        //     a のサイン。 a が System.Double.NaN、System.Double.NegativeInfinity、System.Double.PositiveInfinity
        //     のいずれかに等しい場合、このメソッドは System.Double.NaN を返します。
        [SecuritySafeCritical]
        public static double Sin(double a);
        //
        // 概要:
        //     指定された角度のハイパーボリック サインを返します。
        //
        // パラメーター:
        //   value:
        //     ラジアンで表した角度。
        //
        // 戻り値:
        //     value のハイパーボリック サイン。 value が System.Double.NegativeInfinity、System.Double.PositiveInfinity、または
        //     System.Double.NaN のいずれかに等しい場合、このメソッドは value に等しい System.Double を返します。
        [SecuritySafeCritical]
        public static double Sinh(double value);
        //
        // 概要:
        //     指定された数値の平方根を返します。
        //
        // パラメーター:
        //   d:
        //     平方根を求める対象の数値。
        //
        // 戻り値:
        //     次の表に示した値のいずれか d パラメーター 戻り値 0 または正 d の正の平方根。 負 System.Double.NaNSystem.Double.NaN
        //     と等しいSystem.Double.NaNSystem.Double.PositiveInfinity と等しいSystem.Double.PositiveInfinity
        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
        [SecuritySafeCritical]
        public static double Sqrt(double d);
        //
        // 概要:
        //     指定された角度のタンジェントを返します。
        //
        // パラメーター:
        //   a:
        //     ラジアンで表した角度。
        //
        // 戻り値:
        //     a のタンジェント。 a が System.Double.NaN、System.Double.NegativeInfinity、System.Double.PositiveInfinity
        //     のいずれかに等しい場合、このメソッドは System.Double.NaN を返します。
        [SecuritySafeCritical]
        public static double Tan(double a);
        //
        // 概要:
        //     指定された角度のハイパーボリック タンジェントを返します。
        //
        // パラメーター:
        //   value:
        //     ラジアンで表した角度。
        //
        // 戻り値:
        //     value のハイパーボリック タンジェント。 value が System.Double.NegativeInfinity に等しい場合、このメソッドは
        //     -1 を返します。 値が System.Double.PositiveInfinity に等しい場合、このメソッドは 1 を返します。 value が System.Double.NaN
        //     に等しい場合、このメソッドは System.Double.NaN を返します。
        [SecuritySafeCritical]
        public static double Tanh(double value);
        //
        // 概要:
        //     指定した倍精度浮動小数点数の整数部を計算します。
        //
        // パラメーター:
        //   d:
        //     切り捨て対象の数値。
        //
        // 戻り値:
        //     d の整数部。つまり、小数部の桁を破棄した後に残る数値 (次の表にリストされている値のいずれか)。 d 戻り値 System.Double.NaNSystem.Double.NaNSystem.Double.NegativeInfinitySystem.Double.NegativeInfinitySystem.Double.PositiveInfinitySystem.Double.PositiveInfinity
        public static double Truncate(double d);
        //
        // 概要:
        //     指定した 10 進数の整数部を計算します。
        //
        // パラメーター:
        //   d:
        //     切り捨て対象の数値。
        //
        // 戻り値:
        //     d の整数部。つまり、小数部の桁を破棄した後に残る数値。
        public static decimal Truncate(decimal d);
    }
}
